{
  "address": "0x83858f16CEA4719e6781A617cF7a77e023F9CBF9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_tokenIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mintNum",
          "type": "uint256"
        }
      ],
      "name": "adminMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURIextended",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "assetLimit_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTransferBlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhiteListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetLimit_",
          "type": "uint256"
        }
      ],
      "name": "setAssetLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterAdmin_",
          "type": "address"
        }
      ],
      "name": "setMasterAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isTransferBlocked_",
          "type": "bool"
        }
      ],
      "name": "setTransferBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "setWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "singleMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whiteList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x08b5deb99d959addf9699df0e28ffe131f6d68c1c13108c7248b5a98c5b5a9ea",
  "receipt": {
    "to": null,
    "from": "0xf2616B64972Df1CfDD5301cc95dc3c07979CdA81",
    "contractAddress": "0x83858f16CEA4719e6781A617cF7a77e023F9CBF9",
    "transactionIndex": 1,
    "gasUsed": "2916912",
    "logsBloom": "0x
    "blockHash": "0xfdf4fe92d5aba2c1a1a46c85d85246a050ca48fd0e1de45d554b8b0ba63bfae0",
    "transactionHash": "0x08b5deb99d959addf9699df0e28ffe131f6d68c1c13108c7248b5a98c5b5a9ea",
    "logs": [],
    "blockNumber": 104606054,
    "cumulativeGasUsed": "3063087",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "895ab35733c0607fbc38b08214d3b329",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintNum\",\"type\":\"uint256\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURIextended\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"assetLimit_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTransferBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetLimit_\",\"type\":\"uint256\"}],\"name\":\"setAssetLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterAdmin_\",\"type\":\"address\"}],\"name\":\"setMasterAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isTransferBlocked_\",\"type\":\"bool\"}],\"name\":\"setTransferBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"singleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"adminMint(address,uint256)\":{\"details\":\"preMintChecker \\uc81c\\uc57d\\uc870\\uac74\\uc744 \\ubb34\\uc2dc\\ud558\\uace0, \\ubbfc\\ud305\\uc744 \\uc9c4\\ud589\\ud558\\ub294 \\uc774\\uba38\\uc804\\uc2dc \\uae30\\ub2a5(\\uc77c\\ubc18\\uc801\\uc73c\\ub85c, \\ub2e8\\uc77c \\ubbfc\\ud305 \\uc2dc SingleMint\\ub97c \\uad00\\ub9ac\\uc790\\uac00 \\uc2e4\\ud589\\ud55c\\ub2e4.)\",\"params\":{\"mintNum\":\": receive\\uc5d0\\uac8c \\ubbfc\\ud305\\ud560 \\uc218\\ub7c9\",\"receiver\":\": \\ubbfc\\ud305\\ud55c NFT\\ub97c \\uc804\\uc1a1\\ud560 \\uc8fc\\uc18c\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"singleMint(address)\":{\"details\":\"singleMint\\ub97c \\uc2e4\\ud589\\ud558\\uc5ec Minting\\ud560 \\uc2dc, \\uc720\\uc800\\uac00 \\uc9c1\\uc811 \\ud2b8\\ub79c\\uc7ad\\uc158 \\uc694\\uccad\\uc744 \\ubcf4\\ub0b4\\ub294 \\uacbd\\uc6b0 \\uc720\\uc800\\uac00 whiteList\\uc5d0 \\ub4f1\\ub85d\\ub418\\uc5b4 \\uc788\\uc5b4\\uc57c \\ud55c\\ub2e4.\",\"params\":{\"receiver\":\": \\ubbfc\\ud305\\ud55c NFT\\ub97c \\uc804\\uc1a1\\ud560 \\uc8fc\\uc18c\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adminMint(address,uint256)\":{\"notice\":\"\\uad00\\ub9ac\\uc790 \\uc774\\uba38\\uc804\\uc2dc \\ubbfc\\ud305 \\ud568\\uc218\"},\"singleMint(address)\":{\"notice\":\"\\uc77c\\ubc18 \\uc720\\uc800\\uac00 \\ubbfc\\ud305\\ud558\\ub294 \\ud568\\uc218\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MyLittleEagle.sol\":\"MyLittleEagle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x56035505d62f05f5e5040532b749ab25237f6dd87c7a514614acda96af996751\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"src/MyLittleEagle.sol\":{\"content\":\"pragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract MyLittleEagle is ERC721EnumerableUpgradeable {\\n    using Counters for Counters.Counter;\\n    using StringsUpgradeable for uint256;\\n\\n    address[] public whiteList;\\n    mapping(address => bool) public isWhiteListed;\\n    bool public isTransferBlocked;\\n\\n    address public masterAdmin;\\n    uint256 public assetLimit;\\n    string public baseURIextended;\\n    bool public uriSet;\\n    Counters.Counter public _tokenIdCounter;\\n\\n    modifier onlyMasterAdmin() {\\n        require(msg.sender == masterAdmin, \\\"ContractError: CALLER_MUST_BE_MASTERADMIN\\\");\\n        _;\\n    }\\n\\n    modifier preMintChecker(address receiver) {\\n        require(uriSet == true, \\\"ContractError: INVALID_BASE_URI_SET\\\");\\n        require(isWhiteListed[msg.sender] == true, \\\"ContractError: ACCESS_DENIED\\\");\\n        require(msg.sender == masterAdmin || msg.sender == receiver, \\\"ContractError: CALLER_IS_NOT_RECEIVER\\\");\\n        require(totalSupply() + 1 <= assetLimit, \\\"ContractError: ASSET_LIMIT\\\");\\n        _;\\n    }\\n\\n    modifier transferBlockChecker(address from) {\\n        require(isTransferBlocked == false || from == masterAdmin, \\\"ContractError: TRANSFER_BLOCKED\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 assetLimit_\\n    ) external initializer {\\n        __ERC721_init(name_, symbol_);\\n        masterAdmin = msg.sender;\\n        whiteList.push(msg.sender);\\n        isWhiteListed[msg.sender] = true;\\n        assetLimit = assetLimit_;\\n        uriSet = false;\\n        isTransferBlocked = false;\\n    }\\n\\n    // Metadata set\\n    function setBaseURI(string memory baseURI_) external onlyMasterAdmin {\\n        uriSet = true;\\n        baseURIextended = baseURI_;\\n    }\\n\\n    // Emergency function\\n    function setMasterAdmin(address masterAdmin_) external onlyMasterAdmin {\\n        masterAdmin = masterAdmin_;\\n    }\\n\\n    function setAssetLimit(uint256 assetLimit_) external onlyMasterAdmin {\\n        assetLimit = assetLimit_;\\n    }\\n\\n    function setTransferBlock(bool isTransferBlocked_) external onlyMasterAdmin {\\n        isTransferBlocked = isTransferBlocked_;\\n    }\\n\\n    // Set address to whitelist\\n    function setWhiteList(address user) external onlyMasterAdmin {\\n        require(isWhiteListed[user] == false, \\\"ContractError: ALREADY_LISTED\\\");\\n        whiteList.push(user);\\n        isWhiteListed[user] = true;\\n    }\\n\\n    // Internal mint function\\n    function _singleMint(address receiver) internal {\\n        uint256 id = _tokenIdCounter.current();\\n        if (id == 0) {\\n            _tokenIdCounter.increment();\\n            id = _tokenIdCounter.current();\\n        }\\n\\n        _safeMint(receiver, id);\\n        _tokenIdCounter.increment();\\n    }\\n\\n    /// @notice \\uc77c\\ubc18 \\uc720\\uc800\\uac00 \\ubbfc\\ud305\\ud558\\ub294 \\ud568\\uc218\\n    /// @dev singleMint\\ub97c \\uc2e4\\ud589\\ud558\\uc5ec Minting\\ud560 \\uc2dc, \\uc720\\uc800\\uac00 \\uc9c1\\uc811 \\ud2b8\\ub79c\\uc7ad\\uc158 \\uc694\\uccad\\uc744 \\ubcf4\\ub0b4\\ub294 \\uacbd\\uc6b0 \\uc720\\uc800\\uac00 whiteList\\uc5d0 \\ub4f1\\ub85d\\ub418\\uc5b4 \\uc788\\uc5b4\\uc57c \\ud55c\\ub2e4.\\n    /// @param receiver: \\ubbfc\\ud305\\ud55c NFT\\ub97c \\uc804\\uc1a1\\ud560 \\uc8fc\\uc18c\\n    function singleMint(address receiver) external preMintChecker(receiver) {\\n        _singleMint(receiver);\\n\\n        // \\ub9c8\\uc2a4\\ud130 \\uc5b4\\ub4dc\\ubbfc\\uc758 \\uacbd\\uc6b0, \\ud654\\uc774\\ud2b8\\ub9ac\\uc2a4\\ud2b8 \\uad8c\\ud55c\\uc744 \\uc720\\uc9c0\\ud574\\uc57c \\ud55c\\ub2e4.\\n        if (msg.sender != masterAdmin) {\\n            // \\ud654\\uc774\\ud2b8\\ub9ac\\uc2a4\\ud2b8\\uc5d0\\uc11c \\uc720\\uc800\\ub97c \\uc81c\\uac70\\n            address[] memory whiteListLocal = whiteList;\\n            uint256 len = whiteListLocal.length;\\n            for (uint256 i = 0; i < len; i += 1) {\\n                if (whiteList[i] == receiver) {\\n                    whiteList[i] = whiteList[len - 1]; // i \\ubc88\\uc9f8 index\\ub97c \\ub9c8\\uc9c0\\ub9c9 index\\uc758 data\\ub85c \\ubcc0\\uacbd (i\\ubc88\\uc9f8 \\uc0ad\\uc81c)\\n                    whiteList.pop(); // \\ub9c8\\uc9c0\\ub9c9 index data \\uc0ad\\uc81c (i \\ubc88\\uc9f8 index\\uc5d0 \\uc774\\ubbf8 \\uc62e\\uaca8\\uc9c4 data)\\n                    break;\\n                }\\n            }\\n            isWhiteListed[receiver] = false;\\n        }\\n    }\\n\\n    /// @notice \\uad00\\ub9ac\\uc790 \\uc774\\uba38\\uc804\\uc2dc \\ubbfc\\ud305 \\ud568\\uc218\\n    /// @dev preMintChecker \\uc81c\\uc57d\\uc870\\uac74\\uc744 \\ubb34\\uc2dc\\ud558\\uace0, \\ubbfc\\ud305\\uc744 \\uc9c4\\ud589\\ud558\\ub294 \\uc774\\uba38\\uc804\\uc2dc \\uae30\\ub2a5(\\uc77c\\ubc18\\uc801\\uc73c\\ub85c, \\ub2e8\\uc77c \\ubbfc\\ud305 \\uc2dc SingleMint\\ub97c \\uad00\\ub9ac\\uc790\\uac00 \\uc2e4\\ud589\\ud55c\\ub2e4.)\\n    /// @param receiver: \\ubbfc\\ud305\\ud55c NFT\\ub97c \\uc804\\uc1a1\\ud560 \\uc8fc\\uc18c\\n    /// @param mintNum: receive\\uc5d0\\uac8c \\ubbfc\\ud305\\ud560 \\uc218\\ub7c9\\n    function adminMint(address receiver, uint256 mintNum) external onlyMasterAdmin {\\n        for (uint256 i = 0; i < mintNum; i++) {\\n            _singleMint(receiver);\\n        }\\n    }\\n\\n    // View function\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721EnumerableUpgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\")) : \\\"\\\";\\n    }\\n\\n    // internal function\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURIextended;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721EnumerableUpgradeable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    // \\uc0c1\\uc18d\\ubc1b\\uc740 Transfer \\ud568\\uc218 - \\uc815\\ucc45\\uc5d0 \\ub530\\ub77c Transfer \\uc5ec\\ubd80 \\uc218\\uc815\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override transferBlockChecker(from) {\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override transferBlockChecker(from) {\\n        super.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override transferBlockChecker(from) {\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n}\\n\",\"keccak256\":\"0x69c95f4b7593a6ffbc77ae79cab5d586637763b15930abeb38ae22ff78fd38df\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612539806100206000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806355f804b31161010f578063afd62936116100a2578063c87b56dd11610071578063c87b56dd14610419578063e58306f91461042c578063e985e9c51461043f578063ede6346d1461047b57600080fd5b8063afd62936146103cd578063b119490e146103e0578063b88d4fde146103f3578063bc639b511461040657600080fd5b806370a08231116100de57806370a082311461039557806384c4bd4b146103a857806395d89b41146103b2578063a22cb465146103ba57600080fd5b806355f804b3146103395780635c475d421461034c5780636352211e1461035f5780636f9170f61461037257600080fd5b806323b872dd1161018757806342842e0e1161015657806342842e0e146102f357806343537153146103065780634f6ccce71461031957806350a3a7281461032c57600080fd5b806323b872dd146102a25780632a68f64e146102b55780632f745c59146102cd57806339e899ee146102e057600080fd5b80630d449db0116101c35780630d449db0146102725780630e1e25871461027a57806318160ddd1461028757806322da98e71461029957600080fd5b806301ffc9a7146101f557806306fdde031461021d578063081812fc14610232578063095ea7b31461025d575b600080fd5b610208610203366004611e6a565b61048e565b60405190151581526020015b60405180910390f35b61022561049f565b6040516102149190611edf565b610245610240366004611ef2565b610531565b6040516001600160a01b039091168152602001610214565b61027061026b366004611f27565b610558565b005b610225610673565b60cb546102089060ff1681565b6099545b604051908152602001610214565b61028b60cc5481565b6102706102b0366004611f51565b610701565b60cb546102459061010090046001600160a01b031681565b61028b6102db366004611f27565b610754565b6102706102ee366004611f8d565b6107ea565b610270610301366004611f51565b6108e9565b610270610314366004611fb8565b610936565b61028b610327366004611ef2565b610978565b60ce546102089060ff1681565b61027061034736600461207f565b610a0b565b61024561035a366004611ef2565b610a5e565b61024561036d366004611ef2565b610a88565b610208610380366004611f8d565b60ca6020526000908152604090205460ff1681565b61028b6103a3366004611f8d565b610ae8565b60cf5461028b9081565b610225610b6e565b6102706103c83660046120b4565b610b7d565b6102706103db366004611f8d565b610b88565b6102706103ee3660046120e7565b610edc565b610270610401366004612154565b611078565b610270610414366004611ef2565b6110cd565b610225610427366004611ef2565b611101565b61027061043a366004611f27565b611168565b61020861044d3660046121d0565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b610270610489366004611f8d565b6111bd565b600061049982611214565b92915050565b6060606580546104ae906121fa565b80601f01602080910402602001604051908101604052809291908181526020018280546104da906121fa565b80156105275780601f106104fc57610100808354040283529160200191610527565b820191906000526020600020905b81548152906001019060200180831161050a57829003601f168201915b5050505050905090565b600061053c82611239565b506000908152606960205260409020546001600160a01b031690565b600061056382610a88565b9050806001600160a01b0316836001600160a01b031614156105d65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105f257506105f2813361044d565b6106645760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016105cd565b61066e838361129b565b505050565b60cd8054610680906121fa565b80601f01602080910402602001604051908101604052809291908181526020018280546106ac906121fa565b80156106f95780601f106106ce576101008083540402835291602001916106f9565b820191906000526020600020905b8154815290600101906020018083116106dc57829003601f168201915b505050505081565b60cb54839060ff161580610727575060cb546001600160a01b0382811661010090920416145b6107435760405162461bcd60e51b81526004016105cd90612235565b61074e848484611309565b50505050565b600061075f83610ae8565b82106107c15760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016105cd565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b60cb5461010090046001600160a01b031633146108195760405162461bcd60e51b81526004016105cd9061226c565b6001600160a01b038116600090815260ca602052604090205460ff16156108825760405162461bcd60e51b815260206004820152601d60248201527f436f6e74726163744572726f723a20414c52454144595f4c495354454400000060448201526064016105cd565b60c9805460018181019092557f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d280180546001600160a01b039093166001600160a01b031990931683179055600091825260ca6020526040909120805460ff19169091179055565b60cb54839060ff16158061090f575060cb546001600160a01b0382811661010090920416145b61092b5760405162461bcd60e51b81526004016105cd90612235565b61074e84848461133a565b60cb5461010090046001600160a01b031633146109655760405162461bcd60e51b81526004016105cd9061226c565b60cb805460ff1916911515919091179055565b600061098360995490565b82106109e65760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016105cd565b609982815481106109f9576109f96122b5565b90600052602060002001549050919050565b60cb5461010090046001600160a01b03163314610a3a5760405162461bcd60e51b81526004016105cd9061226c565b60ce805460ff191660011790558051610a5a9060cd906020840190611dbb565b5050565b60c98181548110610a6e57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000818152606760205260408120546001600160a01b0316806104995760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105cd565b60006001600160a01b038216610b525760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105cd565b506001600160a01b031660009081526068602052604090205490565b6060606680546104ae906121fa565b610a5a338383611355565b60ce54819060ff161515600114610bed5760405162461bcd60e51b815260206004820152602360248201527f436f6e74726163744572726f723a20494e56414c49445f424153455f5552495f60448201526214d15560ea1b60648201526084016105cd565b33600090815260ca602052604090205460ff161515600114610c515760405162461bcd60e51b815260206004820152601c60248201527f436f6e74726163744572726f723a204143434553535f44454e4945440000000060448201526064016105cd565b60cb5461010090046001600160a01b0316331480610c775750336001600160a01b038216145b610cd15760405162461bcd60e51b815260206004820152602560248201527f436f6e74726163744572726f723a2043414c4c45525f49535f4e4f545f52454360448201526422a4ab22a960d91b60648201526084016105cd565b60cc54609954610ce29060016122e1565b1115610d305760405162461bcd60e51b815260206004820152601a60248201527f436f6e74726163744572726f723a2041535345545f4c494d495400000000000060448201526064016105cd565b610d3982611424565b60cb5461010090046001600160a01b03163314610a5a57600060c9805480602002602001604051908101604052809291908181526020018280548015610da857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d8a575b505083519394506000925050505b81811015610eb757846001600160a01b031660c98281548110610ddb57610ddb6122b5565b6000918252602090912001546001600160a01b03161415610ea55760c9610e036001846122f9565b81548110610e1357610e136122b5565b60009182526020909120015460c980546001600160a01b039092169183908110610e3f57610e3f6122b5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c9805480610e7e57610e7e612310565b600082815260209020810160001990810180546001600160a01b0319169055019055610eb7565b610eb06001826122e1565b9050610db6565b505050506001600160a01b0316600090815260ca60205260409020805460ff19169055565b600054610100900460ff1615808015610efc5750600054600160ff909116105b80610f165750303b158015610f16575060005460ff166001145b610f795760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105cd565b6000805460ff191660011790558015610f9c576000805461ff0019166101001790555b610fa68484611461565b60cb8054610100600160a81b03191633610100810291909117825560c9805460018181019092557f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d280180546001600160a01b03191683179055600091825260ca6020526040909120805460ff19908116909217905560cc84905560ce8054821690558154169055801561074e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b60cb54849060ff16158061109e575060cb546001600160a01b0382811661010090920416145b6110ba5760405162461bcd60e51b81526004016105cd90612235565b6110c685858585611492565b5050505050565b60cb5461010090046001600160a01b031633146110fc5760405162461bcd60e51b81526004016105cd9061226c565b60cc55565b606061110c82611239565b60006111166114c4565b905060008151116111365760405180602001604052806000815250611161565b80611140846114d3565b604051602001611151929190612326565b6040516020818303038152906040525b9392505050565b60cb5461010090046001600160a01b031633146111975760405162461bcd60e51b81526004016105cd9061226c565b60005b8181101561066e576111ab83611424565b806111b581612365565b91505061119a565b60cb5461010090046001600160a01b031633146111ec5760405162461bcd60e51b81526004016105cd9061226c565b60cb80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60006001600160e01b0319821663780e9d6360e01b14806104995750610499826115d9565b6000818152606760205260409020546001600160a01b03166112985760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105cd565b50565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906112d082610a88565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6113133382611629565b61132f5760405162461bcd60e51b81526004016105cd90612380565b61066e8383836116a7565b61066e83838360405180602001604052806000815250611078565b816001600160a01b0316836001600160a01b031614156113b75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105cd565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600061142f60cf5490565b9050806114495761144460cf80546001019055565b5060cf545b611453828261184e565b610a5a60cf80546001019055565b600054610100900460ff166114885760405162461bcd60e51b81526004016105cd906123ce565b610a5a8282611868565b61149c3383611629565b6114b85760405162461bcd60e51b81526004016105cd90612380565b61074e848484846118b6565b606060cd80546104ae906121fa565b6060816114f75750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611521578061150b81612365565b915061151a9050600a8361242f565b91506114fb565b60008167ffffffffffffffff81111561153c5761153c611fd3565b6040519080825280601f01601f191660200182016040528015611566576020820181803683370190505b5090505b84156115d15761157b6001836122f9565b9150611588600a86612443565b6115939060306122e1565b60f81b8183815181106115a8576115a86122b5565b60200101906001600160f81b031916908160001a9053506115ca600a8661242f565b945061156a565b949350505050565b60006001600160e01b031982166380ac58cd60e01b148061160a57506001600160e01b03198216635b5e139f60e01b145b8061049957506301ffc9a760e01b6001600160e01b0319831614610499565b60008061163583610a88565b9050806001600160a01b0316846001600160a01b0316148061167c57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b806115d15750836001600160a01b031661169584610531565b6001600160a01b031614949350505050565b826001600160a01b03166116ba82610a88565b6001600160a01b03161461171e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016105cd565b6001600160a01b0382166117805760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105cd565b61178b8383836118e9565b61179660008261129b565b6001600160a01b03831660009081526068602052604081208054600192906117bf9084906122f9565b90915550506001600160a01b03821660009081526068602052604081208054600192906117ed9084906122e1565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610a5a8282604051806020016040528060008152506118f4565b600054610100900460ff1661188f5760405162461bcd60e51b81526004016105cd906123ce565b81516118a2906065906020850190611dbb565b50805161066e906066906020840190611dbb565b6118c18484846116a7565b6118cd84848484611927565b61074e5760405162461bcd60e51b81526004016105cd90612457565b61066e838383611a25565b6118fe8383611add565b61190b6000848484611927565b61066e5760405162461bcd60e51b81526004016105cd90612457565b60006001600160a01b0384163b15611a1a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061196b9033908990889088906004016124a9565b6020604051808303816000875af19250505080156119a6575060408051601f3d908101601f191682019092526119a3918101906124e6565b60015b611a00573d8080156119d4576040519150601f19603f3d011682016040523d82523d6000602084013e6119d9565b606091505b5080516119f85760405162461bcd60e51b81526004016105cd90612457565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506115d1565b506001949350505050565b6001600160a01b038316611a8057611a7b81609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b611aa3565b816001600160a01b0316836001600160a01b031614611aa357611aa38382611c2b565b6001600160a01b038216611aba5761066e81611cc8565b826001600160a01b0316826001600160a01b03161461066e5761066e8282611d77565b6001600160a01b038216611b335760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105cd565b6000818152606760205260409020546001600160a01b031615611b985760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105cd565b611ba4600083836118e9565b6001600160a01b0382166000908152606860205260408120805460019290611bcd9084906122e1565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001611c3884610ae8565b611c4291906122f9565b600083815260986020526040902054909150808214611c95576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b609954600090611cda906001906122f9565b6000838152609a602052604081205460998054939450909284908110611d0257611d026122b5565b906000526020600020015490508060998381548110611d2357611d236122b5565b6000918252602080832090910192909255828152609a90915260408082208490558582528120556099805480611d5b57611d5b612310565b6001900381819060005260206000200160009055905550505050565b6000611d8283610ae8565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b828054611dc7906121fa565b90600052602060002090601f016020900481019282611de95760008555611e2f565b82601f10611e0257805160ff1916838001178555611e2f565b82800160010185558215611e2f579182015b82811115611e2f578251825591602001919060010190611e14565b50611e3b929150611e3f565b5090565b5b80821115611e3b5760008155600101611e40565b6001600160e01b03198116811461129857600080fd5b600060208284031215611e7c57600080fd5b813561116181611e54565b60005b83811015611ea2578181015183820152602001611e8a565b8381111561074e5750506000910152565b60008151808452611ecb816020860160208601611e87565b601f01601f19169290920160200192915050565b6020815260006111616020830184611eb3565b600060208284031215611f0457600080fd5b5035919050565b80356001600160a01b0381168114611f2257600080fd5b919050565b60008060408385031215611f3a57600080fd5b611f4383611f0b565b946020939093013593505050565b600080600060608486031215611f6657600080fd5b611f6f84611f0b565b9250611f7d60208501611f0b565b9150604084013590509250925092565b600060208284031215611f9f57600080fd5b61116182611f0b565b80358015158114611f2257600080fd5b600060208284031215611fca57600080fd5b61116182611fa8565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561200457612004611fd3565b604051601f8501601f19908116603f0116810190828211818310171561202c5761202c611fd3565b8160405280935085815286868601111561204557600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261207057600080fd5b61116183833560208501611fe9565b60006020828403121561209157600080fd5b813567ffffffffffffffff8111156120a857600080fd5b6115d18482850161205f565b600080604083850312156120c757600080fd5b6120d083611f0b565b91506120de60208401611fa8565b90509250929050565b6000806000606084860312156120fc57600080fd5b833567ffffffffffffffff8082111561211457600080fd5b6121208783880161205f565b9450602086013591508082111561213657600080fd5b506121438682870161205f565b925050604084013590509250925092565b6000806000806080858703121561216a57600080fd5b61217385611f0b565b935061218160208601611f0b565b925060408501359150606085013567ffffffffffffffff8111156121a457600080fd5b8501601f810187136121b557600080fd5b6121c487823560208401611fe9565b91505092959194509250565b600080604083850312156121e357600080fd5b6121ec83611f0b565b91506120de60208401611f0b565b600181811c9082168061220e57607f821691505b6020821081141561222f57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f436f6e74726163744572726f723a205452414e534645525f424c4f434b454400604082015260600190565b60208082526029908201527f436f6e74726163744572726f723a2043414c4c45525f4d5553545f42455f4d4160408201526829aa22a920a226a4a760b91b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156122f4576122f46122cb565b500190565b60008282101561230b5761230b6122cb565b500390565b634e487b7160e01b600052603160045260246000fd5b60008351612338818460208801611e87565b83519083019061234c818360208801611e87565b64173539b7b760d91b9101908152600501949350505050565b6000600019821415612379576123796122cb565b5060010190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261243e5761243e612419565b500490565b60008261245257612452612419565b500690565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906124dc90830184611eb3565b9695505050505050565b6000602082840312156124f857600080fd5b815161116181611e5456fea2646970667358221220776e46a14276b583f0e84a88d7d17bc5c9166f2e2c4b41fbbdc24efe6a193f1c64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c806355f804b31161010f578063afd62936116100a2578063c87b56dd11610071578063c87b56dd14610419578063e58306f91461042c578063e985e9c51461043f578063ede6346d1461047b57600080fd5b8063afd62936146103cd578063b119490e146103e0578063b88d4fde146103f3578063bc639b511461040657600080fd5b806370a08231116100de57806370a082311461039557806384c4bd4b146103a857806395d89b41146103b2578063a22cb465146103ba57600080fd5b806355f804b3146103395780635c475d421461034c5780636352211e1461035f5780636f9170f61461037257600080fd5b806323b872dd1161018757806342842e0e1161015657806342842e0e146102f357806343537153146103065780634f6ccce71461031957806350a3a7281461032c57600080fd5b806323b872dd146102a25780632a68f64e146102b55780632f745c59146102cd57806339e899ee146102e057600080fd5b80630d449db0116101c35780630d449db0146102725780630e1e25871461027a57806318160ddd1461028757806322da98e71461029957600080fd5b806301ffc9a7146101f557806306fdde031461021d578063081812fc14610232578063095ea7b31461025d575b600080fd5b610208610203366004611e6a565b61048e565b60405190151581526020015b60405180910390f35b61022561049f565b6040516102149190611edf565b610245610240366004611ef2565b610531565b6040516001600160a01b039091168152602001610214565b61027061026b366004611f27565b610558565b005b610225610673565b60cb546102089060ff1681565b6099545b604051908152602001610214565b61028b60cc5481565b6102706102b0366004611f51565b610701565b60cb546102459061010090046001600160a01b031681565b61028b6102db366004611f27565b610754565b6102706102ee366004611f8d565b6107ea565b610270610301366004611f51565b6108e9565b610270610314366004611fb8565b610936565b61028b610327366004611ef2565b610978565b60ce546102089060ff1681565b61027061034736600461207f565b610a0b565b61024561035a366004611ef2565b610a5e565b61024561036d366004611ef2565b610a88565b610208610380366004611f8d565b60ca6020526000908152604090205460ff1681565b61028b6103a3366004611f8d565b610ae8565b60cf5461028b9081565b610225610b6e565b6102706103c83660046120b4565b610b7d565b6102706103db366004611f8d565b610b88565b6102706103ee3660046120e7565b610edc565b610270610401366004612154565b611078565b610270610414366004611ef2565b6110cd565b610225610427366004611ef2565b611101565b61027061043a366004611f27565b611168565b61020861044d3660046121d0565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b610270610489366004611f8d565b6111bd565b600061049982611214565b92915050565b6060606580546104ae906121fa565b80601f01602080910402602001604051908101604052809291908181526020018280546104da906121fa565b80156105275780601f106104fc57610100808354040283529160200191610527565b820191906000526020600020905b81548152906001019060200180831161050a57829003601f168201915b5050505050905090565b600061053c82611239565b506000908152606960205260409020546001600160a01b031690565b600061056382610a88565b9050806001600160a01b0316836001600160a01b031614156105d65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105f257506105f2813361044d565b6106645760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016105cd565b61066e838361129b565b505050565b60cd8054610680906121fa565b80601f01602080910402602001604051908101604052809291908181526020018280546106ac906121fa565b80156106f95780601f106106ce576101008083540402835291602001916106f9565b820191906000526020600020905b8154815290600101906020018083116106dc57829003601f168201915b505050505081565b60cb54839060ff161580610727575060cb546001600160a01b0382811661010090920416145b6107435760405162461bcd60e51b81526004016105cd90612235565b61074e848484611309565b50505050565b600061075f83610ae8565b82106107c15760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016105cd565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b60cb5461010090046001600160a01b031633146108195760405162461bcd60e51b81526004016105cd9061226c565b6001600160a01b038116600090815260ca602052604090205460ff16156108825760405162461bcd60e51b815260206004820152601d60248201527f436f6e74726163744572726f723a20414c52454144595f4c495354454400000060448201526064016105cd565b60c9805460018181019092557f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d280180546001600160a01b039093166001600160a01b031990931683179055600091825260ca6020526040909120805460ff19169091179055565b60cb54839060ff16158061090f575060cb546001600160a01b0382811661010090920416145b61092b5760405162461bcd60e51b81526004016105cd90612235565b61074e84848461133a565b60cb5461010090046001600160a01b031633146109655760405162461bcd60e51b81526004016105cd9061226c565b60cb805460ff1916911515919091179055565b600061098360995490565b82106109e65760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016105cd565b609982815481106109f9576109f96122b5565b90600052602060002001549050919050565b60cb5461010090046001600160a01b03163314610a3a5760405162461bcd60e51b81526004016105cd9061226c565b60ce805460ff191660011790558051610a5a9060cd906020840190611dbb565b5050565b60c98181548110610a6e57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000818152606760205260408120546001600160a01b0316806104995760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105cd565b60006001600160a01b038216610b525760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105cd565b506001600160a01b031660009081526068602052604090205490565b6060606680546104ae906121fa565b610a5a338383611355565b60ce54819060ff161515600114610bed5760405162461bcd60e51b815260206004820152602360248201527f436f6e74726163744572726f723a20494e56414c49445f424153455f5552495f60448201526214d15560ea1b60648201526084016105cd565b33600090815260ca602052604090205460ff161515600114610c515760405162461bcd60e51b815260206004820152601c60248201527f436f6e74726163744572726f723a204143434553535f44454e4945440000000060448201526064016105cd565b60cb5461010090046001600160a01b0316331480610c775750336001600160a01b038216145b610cd15760405162461bcd60e51b815260206004820152602560248201527f436f6e74726163744572726f723a2043414c4c45525f49535f4e4f545f52454360448201526422a4ab22a960d91b60648201526084016105cd565b60cc54609954610ce29060016122e1565b1115610d305760405162461bcd60e51b815260206004820152601a60248201527f436f6e74726163744572726f723a2041535345545f4c494d495400000000000060448201526064016105cd565b610d3982611424565b60cb5461010090046001600160a01b03163314610a5a57600060c9805480602002602001604051908101604052809291908181526020018280548015610da857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d8a575b505083519394506000925050505b81811015610eb757846001600160a01b031660c98281548110610ddb57610ddb6122b5565b6000918252602090912001546001600160a01b03161415610ea55760c9610e036001846122f9565b81548110610e1357610e136122b5565b60009182526020909120015460c980546001600160a01b039092169183908110610e3f57610e3f6122b5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c9805480610e7e57610e7e612310565b600082815260209020810160001990810180546001600160a01b0319169055019055610eb7565b610eb06001826122e1565b9050610db6565b505050506001600160a01b0316600090815260ca60205260409020805460ff19169055565b600054610100900460ff1615808015610efc5750600054600160ff909116105b80610f165750303b158015610f16575060005460ff166001145b610f795760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105cd565b6000805460ff191660011790558015610f9c576000805461ff0019166101001790555b610fa68484611461565b60cb8054610100600160a81b03191633610100810291909117825560c9805460018181019092557f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d280180546001600160a01b03191683179055600091825260ca6020526040909120805460ff19908116909217905560cc84905560ce8054821690558154169055801561074e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b60cb54849060ff16158061109e575060cb546001600160a01b0382811661010090920416145b6110ba5760405162461bcd60e51b81526004016105cd90612235565b6110c685858585611492565b5050505050565b60cb5461010090046001600160a01b031633146110fc5760405162461bcd60e51b81526004016105cd9061226c565b60cc55565b606061110c82611239565b60006111166114c4565b905060008151116111365760405180602001604052806000815250611161565b80611140846114d3565b604051602001611151929190612326565b6040516020818303038152906040525b9392505050565b60cb5461010090046001600160a01b031633146111975760405162461bcd60e51b81526004016105cd9061226c565b60005b8181101561066e576111ab83611424565b806111b581612365565b91505061119a565b60cb5461010090046001600160a01b031633146111ec5760405162461bcd60e51b81526004016105cd9061226c565b60cb80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60006001600160e01b0319821663780e9d6360e01b14806104995750610499826115d9565b6000818152606760205260409020546001600160a01b03166112985760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105cd565b50565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906112d082610a88565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6113133382611629565b61132f5760405162461bcd60e51b81526004016105cd90612380565b61066e8383836116a7565b61066e83838360405180602001604052806000815250611078565b816001600160a01b0316836001600160a01b031614156113b75760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105cd565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600061142f60cf5490565b9050806114495761144460cf80546001019055565b5060cf545b611453828261184e565b610a5a60cf80546001019055565b600054610100900460ff166114885760405162461bcd60e51b81526004016105cd906123ce565b610a5a8282611868565b61149c3383611629565b6114b85760405162461bcd60e51b81526004016105cd90612380565b61074e848484846118b6565b606060cd80546104ae906121fa565b6060816114f75750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611521578061150b81612365565b915061151a9050600a8361242f565b91506114fb565b60008167ffffffffffffffff81111561153c5761153c611fd3565b6040519080825280601f01601f191660200182016040528015611566576020820181803683370190505b5090505b84156115d15761157b6001836122f9565b9150611588600a86612443565b6115939060306122e1565b60f81b8183815181106115a8576115a86122b5565b60200101906001600160f81b031916908160001a9053506115ca600a8661242f565b945061156a565b949350505050565b60006001600160e01b031982166380ac58cd60e01b148061160a57506001600160e01b03198216635b5e139f60e01b145b8061049957506301ffc9a760e01b6001600160e01b0319831614610499565b60008061163583610a88565b9050806001600160a01b0316846001600160a01b0316148061167c57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b806115d15750836001600160a01b031661169584610531565b6001600160a01b031614949350505050565b826001600160a01b03166116ba82610a88565b6001600160a01b03161461171e5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016105cd565b6001600160a01b0382166117805760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105cd565b61178b8383836118e9565b61179660008261129b565b6001600160a01b03831660009081526068602052604081208054600192906117bf9084906122f9565b90915550506001600160a01b03821660009081526068602052604081208054600192906117ed9084906122e1565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610a5a8282604051806020016040528060008152506118f4565b600054610100900460ff1661188f5760405162461bcd60e51b81526004016105cd906123ce565b81516118a2906065906020850190611dbb565b50805161066e906066906020840190611dbb565b6118c18484846116a7565b6118cd84848484611927565b61074e5760405162461bcd60e51b81526004016105cd90612457565b61066e838383611a25565b6118fe8383611add565b61190b6000848484611927565b61066e5760405162461bcd60e51b81526004016105cd90612457565b60006001600160a01b0384163b15611a1a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061196b9033908990889088906004016124a9565b6020604051808303816000875af19250505080156119a6575060408051601f3d908101601f191682019092526119a3918101906124e6565b60015b611a00573d8080156119d4576040519150601f19603f3d011682016040523d82523d6000602084013e6119d9565b606091505b5080516119f85760405162461bcd60e51b81526004016105cd90612457565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506115d1565b506001949350505050565b6001600160a01b038316611a8057611a7b81609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b611aa3565b816001600160a01b0316836001600160a01b031614611aa357611aa38382611c2b565b6001600160a01b038216611aba5761066e81611cc8565b826001600160a01b0316826001600160a01b03161461066e5761066e8282611d77565b6001600160a01b038216611b335760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105cd565b6000818152606760205260409020546001600160a01b031615611b985760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105cd565b611ba4600083836118e9565b6001600160a01b0382166000908152606860205260408120805460019290611bcd9084906122e1565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001611c3884610ae8565b611c4291906122f9565b600083815260986020526040902054909150808214611c95576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b609954600090611cda906001906122f9565b6000838152609a602052604081205460998054939450909284908110611d0257611d026122b5565b906000526020600020015490508060998381548110611d2357611d236122b5565b6000918252602080832090910192909255828152609a90915260408082208490558582528120556099805480611d5b57611d5b612310565b6001900381819060005260206000200160009055905550505050565b6000611d8283610ae8565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b828054611dc7906121fa565b90600052602060002090601f016020900481019282611de95760008555611e2f565b82601f10611e0257805160ff1916838001178555611e2f565b82800160010185558215611e2f579182015b82811115611e2f578251825591602001919060010190611e14565b50611e3b929150611e3f565b5090565b5b80821115611e3b5760008155600101611e40565b6001600160e01b03198116811461129857600080fd5b600060208284031215611e7c57600080fd5b813561116181611e54565b60005b83811015611ea2578181015183820152602001611e8a565b8381111561074e5750506000910152565b60008151808452611ecb816020860160208601611e87565b601f01601f19169290920160200192915050565b6020815260006111616020830184611eb3565b600060208284031215611f0457600080fd5b5035919050565b80356001600160a01b0381168114611f2257600080fd5b919050565b60008060408385031215611f3a57600080fd5b611f4383611f0b565b946020939093013593505050565b600080600060608486031215611f6657600080fd5b611f6f84611f0b565b9250611f7d60208501611f0b565b9150604084013590509250925092565b600060208284031215611f9f57600080fd5b61116182611f0b565b80358015158114611f2257600080fd5b600060208284031215611fca57600080fd5b61116182611fa8565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561200457612004611fd3565b604051601f8501601f19908116603f0116810190828211818310171561202c5761202c611fd3565b8160405280935085815286868601111561204557600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261207057600080fd5b61116183833560208501611fe9565b60006020828403121561209157600080fd5b813567ffffffffffffffff8111156120a857600080fd5b6115d18482850161205f565b600080604083850312156120c757600080fd5b6120d083611f0b565b91506120de60208401611fa8565b90509250929050565b6000806000606084860312156120fc57600080fd5b833567ffffffffffffffff8082111561211457600080fd5b6121208783880161205f565b9450602086013591508082111561213657600080fd5b506121438682870161205f565b925050604084013590509250925092565b6000806000806080858703121561216a57600080fd5b61217385611f0b565b935061218160208601611f0b565b925060408501359150606085013567ffffffffffffffff8111156121a457600080fd5b8501601f810187136121b557600080fd5b6121c487823560208401611fe9565b91505092959194509250565b600080604083850312156121e357600080fd5b6121ec83611f0b565b91506120de60208401611f0b565b600181811c9082168061220e57607f821691505b6020821081141561222f57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f436f6e74726163744572726f723a205452414e534645525f424c4f434b454400604082015260600190565b60208082526029908201527f436f6e74726163744572726f723a2043414c4c45525f4d5553545f42455f4d4160408201526829aa22a920a226a4a760b91b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156122f4576122f46122cb565b500190565b60008282101561230b5761230b6122cb565b500390565b634e487b7160e01b600052603160045260246000fd5b60008351612338818460208801611e87565b83519083019061234c818360208801611e87565b64173539b7b760d91b9101908152600501949350505050565b6000600019821415612379576123796122cb565b5060010190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261243e5761243e612419565b500490565b60008261245257612452612419565b500690565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906124dc90830184611eb3565b9695505050505050565b6000602082840312156124f857600080fd5b815161116181611e5456fea2646970667358221220776e46a14276b583f0e84a88d7d17bc5c9166f2e2c4b41fbbdc24efe6a193f1c64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "adminMint(address,uint256)": {
        "details": "preMintChecker 제약조건을 무시하고, 민팅을 진행하는 이머전시 기능(일반적으로, 단일 민팅 시 SingleMint를 관리자가 실행한다.)",
        "params": {
          "mintNum": ": receive에게 민팅할 수량",
          "receiver": ": 민팅한 NFT를 전송할 주소"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "singleMint(address)": {
        "details": "singleMint를 실행하여 Minting할 시, 유저가 직접 트랜잭션 요청을 보내는 경우 유저가 whiteList에 등록되어 있어야 한다.",
        "params": {
          "receiver": ": 민팅한 NFT를 전송할 주소"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adminMint(address,uint256)": {
        "notice": "관리자 이머전시 민팅 함수"
      },
      "singleMint(address)": {
        "notice": "일반 유저가 민팅하는 함수"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1876,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2146,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 179,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 181,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 185,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 189,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 193,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 199,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1041,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1206,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1210,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1213,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1217,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1533,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 2250,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "whiteList",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2254,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "isWhiteListed",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2256,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "isTransferBlocked",
        "offset": 0,
        "slot": "203",
        "type": "t_bool"
      },
      {
        "astId": 2258,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "masterAdmin",
        "offset": 1,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 2260,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "assetLimit",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 2262,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "baseURIextended",
        "offset": 0,
        "slot": "205",
        "type": "t_string_storage"
      },
      {
        "astId": 2264,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "uriSet",
        "offset": 0,
        "slot": "206",
        "type": "t_bool"
      },
      {
        "astId": 2267,
        "contract": "src/MyLittleEagle.sol:MyLittleEagle",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "207",
        "type": "t_struct(Counter)2165_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2165_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2164,
            "contract": "src/MyLittleEagle.sol:MyLittleEagle",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}